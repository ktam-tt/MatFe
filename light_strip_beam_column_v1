// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      110 


// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 5; // delay for half a second
const int analogInPin1 = A1 ;
const int analogInPin2 = A2; //sensor 2
//int sensorValue = 0;        // value read from the pot
//int outputValue = 0;  
int sensorValue1 = 0;        // value read from the pot
int sensorValue2 = 0; 
int outputValue1 = 0;  
int outputValue2 = 0;

int sensor1max = 0;
int sensor1min = 1024;
int sensor2max = 0;
int sensor2min = 1024;


const int numReadings = 10;
int readings[numReadings];      // the readings from the analog input
int index = 0;                  // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
int inputPin = A0;



void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif
  // End of trinket special code
  Serial.begin(115200); 

  pixels.begin(); // This initializes the NeoPixel library.  

}

void loop() {



  sensorValue1 = analogRead(analogInPin2);    
sensorValue2 = analogRead(analogInPin1);  

  if (sensorValue1 > sensor1max){
    sensor1max = sensorValue1+5;
  }
  if (sensorValue1<sensor1min){
    sensor1min = sensorValue1-5;
  }
  if (sensorValue2 > sensor2max){
    sensor2max = sensorValue2+5;
  }
  if (sensorValue2<sensor2min){
    sensor2min = sensorValue2-5;
  }

  //ADJUST MAPPING VALUES HERE____________________________
  outputValue1 = map(sensorValue1, sensor1min, sensor1max, 0, 255);
  outputValue2 = map(sensorValue2, sensor2min, sensor2max, 0, 255);

  //LIMIT RANGE OF RGB COLOR
  if (outputValue1 >255){
    outputValue1 = 255;
  }
  if (outputValue1 <0){
    outputValue1 = 0;
  }

  if (outputValue2 >255){
    outputValue2 = 255;
  }
  if (outputValue2 <0){
    outputValue2 = 0;
  }


  //Serial.println(outputValue);
//for beam
  for(int i=0;i<55;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    float pos=i;
    if (pos>27){
      pos = 55-i;
    }

    float bluecolor = 255-(outputValue1*(pos/10)) ; 
    //make sure color isn't out of bounds
    if (bluecolor < 0){
      bluecolor = 0;
    }
    float redcolor = 255-bluecolor;
    float greencolor = bluecolor;

    pixels.setPixelColor(i, pixels.Color(redcolor,greencolor,bluecolor)); // Moderately bright green color.
    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(0); // Delay for a period of time (in milliseconds).

  }
  
  //for column
  for(int i=56;i<110;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    float pos=i;
    if (pos>83){
      pos = 110-i;
    }

    float bluecolor = 255-(outputValue2*(pos/20)) ; 
    //make sure color isn't out of bounds
    if (bluecolor < 0){
      bluecolor = 0;
    }
    float redcolor = 255-bluecolor;
    float greencolor = bluecolor;

    pixels.setPixelColor(i, pixels.Color(redcolor,greencolor,bluecolor)); // Moderately bright green color.
    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(0); // Delay for a period of time (in milliseconds).

  }
  
}
