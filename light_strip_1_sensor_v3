// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      55 


// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 5; // delay for half a second
const int analogInPin = A1 ;
int sensorValue = 0;        // value read from the pot
int outputValue = 0;  
//int sensorValue1 = 0;        // value read from the pot
//int sensorValue2 = 0; 
//int outputValue1 = 0;  
//int outputValue2 = 0;

int sensor1max = 0;
int sensor1min = 1024;
int sensitivity = 5;
//int sensor2max = 0;
//int sensor2min = 1024;


int bootValue = 0;

const int numReadings = 10;
int readings[numReadings];      // the readings from the analog input
int index = 0;                  // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
int inputPin = A1;



void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif
  // End of trinket special code
Serial.begin(115200); 

  pixels.begin(); // This initializes the NeoPixel library.  
     bootValue = analogRead(analogInPin); 
     
}

void loop() {

  
  
 sensorValue = analogRead(analogInPin);    


  if (sensorValue > sensor1max){
    sensor1max = sensorValue+sensitivity;
  }
  if (sensorValue<sensor1min){
    sensor1min = sensorValue-sensitivity;
  }
  
   Serial.print("SENSOR_");
     Serial.print(sensor1min);
    Serial.print("____");
    Serial.print(sensorValue);
     Serial.print("____");
    Serial.println(sensor1max);
    Serial.print("BOOT___");
    Serial.println(bootValue);
  
  // map it to the range of the analog out:
  //outputValue = map(sensorValue, bootValue, sensor1max , 0, 255);
 
 if (sensorValue>bootValue)
  {
  outputValue = map(sensorValue, bootValue, sensor1max , 0, 255);
  }
  else
  {
   outputValue = map(sensorValue, sensor1min, bootValue , 255, 0);
  }
  
 
 
  if (outputValue >255){
      outputValue = 255;
    }
  if (outputValue <0){
      outputValue = 0;
    }
  
Serial.println(outputValue);

  for(int i=0;i<NUMPIXELS;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    float pos=i;
    if (pos>27){
      pos = NUMPIXELS-i;
    }
   
    float bluecolor = 255-(outputValue*(pos/10)) ; 
    //make sure color isn't out of bounds
    if (bluecolor < 0){
      bluecolor = 0;
    }
    float redcolor = 255-bluecolor;
  float greencolor = bluecolor;
    
    //Serial.println(outputValue);
    //Serial.print("RED____");
    //Serial.println(redcolor);
    
    /*
     Serial.print("I_");
     Serial.print(i);
    Serial.print("_POS_");
    Serial.print(pos);
    Serial.print("BLUE____");
    Serial.println(bluecolor);
    */
    
    pixels.setPixelColor(i, pixels.Color(redcolor,greencolor,bluecolor)); // Moderately bright green color.
//pixels.setPixelColor(i, pixels.Color(0,0,bluecolor));

    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(0); // Delay for a period of time (in milliseconds).

  }
  /*
  for(int i=0;i<NUMPIXELS;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(i, pixels.Color(0,0,150)); // Moderately bright green color.

    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(delayval); // Delay for a period of time (in milliseconds).

  }
  */
}
