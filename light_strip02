// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      55 


// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 5; // delay for half a second
const int analogInPin = A0;
int sensorValue = 0;        // value read from the pot
int outputValue = 0;  


void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif
  // End of trinket special code
Serial.begin(9600); 

  pixels.begin(); // This initializes the NeoPixel library.
}

void loop() {

  
  sensorValue = analogRead(analogInPin);            
  // map it to the range of the analog out:
  outputValue = map(sensorValue, 450, 750, 0, 255);
  if (outputValue >255){
      outputValue = 255;
    }
  
  
Serial.println(outputValue);

  for(float i=0;i<NUMPIXELS;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    float bluecolor = 255-(outputValue*(i/NUMPIXELS)) ;
    //if (redcolor >255){
     // redcolor = 255;
    //}
   
    float redcolor = 255-bluecolor;
    //if (bluecolor >255){
     // bluecolor = 255;
    //}
    bluecolor = 0;
    
    
    //Serial.println(outputValue);
    //Serial.print("RED____");
    //Serial.println(redcolor);
    //Serial.print("BLUE____");
    //Serial.println(bluecolor);
    
    
    pixels.setPixelColor(i, pixels.Color(redcolor,0,bluecolor)); // Moderately bright green color.

    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(0); // Delay for a period of time (in milliseconds).

  }
  /*
  for(int i=0;i<NUMPIXELS;i++){

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(i, pixels.Color(0,0,150)); // Moderately bright green color.

    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(delayval); // Delay for a period of time (in milliseconds).

  }
  */
}
